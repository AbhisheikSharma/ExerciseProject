package testCases;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import pageFactory.CustomersPageFactory;
import pageFactory.DashboardPageFactory;
import pageFactory.NewCustomerPageFactory;
import pageFactory.NewProductPageFactory;
import pageFactory.ProductsPageFactory;
import utilityLibrary.ExtentFactory;
import utilityLibrary.RequiredCapabilities;
public class UserCreationProductCreationAndSearches extends RequiredCapabilities{
	WebDriver driver;
	DashboardPageFactory dashboardpagefactory;
	CustomersPageFactory customerspagefactory;
	NewCustomerPageFactory newcustomerpagefactory;
	ProductsPageFactory productspagefactory;
	NewProductPageFactory newproductpagefactory;
	boolean result;
	ExtentReports report;
	ExtentTest test;
	
	@BeforeMethod
	@Parameters({"browsername"})
	public void configurations(String browsername) {
		driver = setCapabilities(browsername);
		report = ExtentFactory.getInstance();
		test = report.startTest("User Creation and Search Tests");
		test.log(LogStatus.INFO, "Application launched in the browser - user on dashboard");
		dashboardpagefactory = new DashboardPageFactory(driver);
		customerspagefactory = new CustomersPageFactory(driver);
		newcustomerpagefactory = new NewCustomerPageFactory(driver);
		productspagefactory = new ProductsPageFactory(driver);
		newproductpagefactory = new NewProductPageFactory(driver);
		}
	
/*	@Test (groups={"customerrelatedregression","smoke"},priority=1)
	public void createNewUser() {
		System.out.println("Creating new customer");
		result = dashboardpagefactory.verifyDashboardAndClickCustomersTab();
		Assert.assertTrue(result, "Issue encountered in dashboard page load and unable to click Customers tab");
		result = customerspagefactory.initiateNewCustomerCreation();
		Assert.assertTrue(result, "Issue encountered in clicking New Customer button");
		result = newcustomerpagefactory.createUser_Username();
		Assert.assertTrue(result, "Issue encountered in obtaining new username field");
		result = newcustomerpagefactory.createUser_Password();
		Assert.assertTrue(result, "Issue encountered in obtaining email field");
		result = newcustomerpagefactory.createUser_Pwdhash();
		Assert.assertTrue(result, "Issue encountered in obtaining password hash field");
		result = newcustomerpagefactory.createUser_Pwdsalt();
		Assert.assertTrue(result, "Issue encountered in obtaining password salt field");
		test.log(LogStatus.INFO, "All required fields available for user input");
		newcustomerpagefactory.enterNewUserDataAndSubmit("xxx", "yyy", "zzz", "aaa");
		test.log(LogStatus.PASS, "New User Created Successfully - We cannot go beyond submission as we are getting some exception on submitting flow");
		
	}
	
	@Test(groups={"customerrelatedregression","smoke"}, priority = 2)
	@Parameters({"filteroption","textval"})
	public void customerSearchWithFilters(String filteroption, String textval) {
		System.out.println("Searching customer now");
		result = dashboardpagefactory.verifyDashboardAndClickCustomersTab();
		Assert.assertTrue(result, "Issue encountered in dashboard page load and unable to click Customers tab");
		result = customerspagefactory.userNameFilter(filteroption);
		Assert.assertTrue(result, "Issue encountered in finding Username search option");
		customerspagefactory.enterUserName(textval);
		result = customerspagefactory.clickFilterButton();
		Assert.assertTrue(result, "Filter button not found");
		test.log(LogStatus.PASS, "User search performed successfully using username as the filter criteria");
	}
	
@Test(groups={"productsrelatedregression","smoke"}, priority = 3)
	public void createNewProduct() {
	System.out.println("Creating new product now");
	result = dashboardpagefactory.verifyDashboardAndClickProductsTab();
	Assert.assertTrue(result, "Issue encountered in dashboard page load and unable to click Products tab");
	report.startTest("Creation of new products");
	newproductpagefactory.template();
	test.log(LogStatus.PASS, "Successful creation of product");
}*/

@Test(groups={"productrelatedregression","smoke"}, priority = 4)
@Parameters({"bookname"})
public void searchFeaturedProduct(String bookname) {
	System.out.println("Searching featured product now");
	result = productspagefactory.locateFeaturedProductsTab();
	Assert.assertTrue(result,"Featured Products tab not found");
	productspagefactory.clickfeaturesTab();
	List<WebElement> allfeatured = driver.findElements(By.xpath("//table/td"));
	System.out.println("Size of list:"+allfeatured.size());
}
@AfterMethod
public void tearOff() {
	driver.quit();
	report.endTest(test);
	report.flush();
}
}
